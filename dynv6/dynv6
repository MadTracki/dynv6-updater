#!/bin/bash

# based on https://github.com/SaraSmiseth/dynv6-updater
# based on https://gist.github.com/corny/7a07f5ac901844bd20c9

# This file can not have a file extension.
# Cron run-parts will not run it if it has one.
# See https://gist.github.com/andyshinn/3ae01fa13cb64c9d36e7

# to use trap only in this function: sub-shell
# See https://stackoverflow.com/a/23849360
update_host()
(
    trap return ERR

    local hostname=$1

    if [ -e /usr/bin/curl ]; then
        bin="curl -fsS -o /dev/null"
    elif [ -e /usr/bin/wget ]; then
        bin="wget -qO-"
    else
        echo "$(date +"%Y-%m-%d %T"): neither curl nor wget found"
        return 1
    fi

    # scope global to return the external ip with subnet mask and don't include local addresses
    current_local_ip=$(ip -6 addr list scope global $DYNV6_NETWORK_DEVICE | grep -v " fd" | sed -n 's/.*inet6 \([0-9a-f:]\+\).*/\1/p' | head -n 1)
    if [[ -z "$current_local_ip" ]]; then
        echo "$(date +"%Y-%m-%d %T"): Unable to detect current ip. Exiting."
        return 1
    fi

    current_ip_file=/root/current_ip/${hostname}
    local old_ip
    [ -e "$current_ip_file" ] && old_ip="$(cat "$current_ip_file")"

    if [ "$old_ip" = "$current_local_ip" ]; then
        # Local check: Ip address unchanged
        # Additionally do a real dns lookup via dig
        current_dig_ip_ns1=$(dig @ns1.dynv6.com $hostname aaaa +short | sed -n 's/\([0-9a-f:]\+\)/\1/p' | head -n 1)
        current_dig_ip_ns2=$(dig @ns2.dynv6.com $hostname aaaa +short | sed -n 's/\([0-9a-f:]\+\)/\1/p' | head -n 1)
        current_dig_ip_ns3=$(dig @ns3.dynv6.com $hostname aaaa +short | sed -n 's/\([0-9a-f:]\+\)/\1/p' | head -n 1)
        if [ -z "$current_dig_ip_ns1" ] || [ -z "$current_dig_ip_ns2" ] || [ -z "$current_dig_ip_ns3" ]; then
            echo "$(date +"%Y-%m-%d %T"): [REMOTE] Could not resolve the ip of $hostname. Updating."
            true 
        elif [ "$current_local_ip" != "$current_dig_ip_ns1" ]; then
            echo "$(date +"%Y-%m-%d %T"): [REMOTE] IP mismatch against ns1. Remote: $current_dig_ip_ns1 Local: $current_local_ip. Updating ip for $hostname."
            true
        elif [ "$current_local_ip" != "$current_dig_ip_ns2" ]; then
            echo "$(date +"%Y-%m-%d %T"): [REMOTE] IP mismatch against ns2. Remote: $current_dig_ip_ns2 Local: $current_local_ip. Updating ip for $hostname."
            true
        elif [ "$current_local_ip" != "$current_dig_ip_ns3" ]; then
            echo "$(date +"%Y-%m-%d %T"): [REMOTE] IP mismatch against ns3. Remote: $current_dig_ip_ns3 Local: $current_local_ip. Updating ip for $hostname."
            true
        else
            # Local and Remote IPs did not change. Exit.
            # echo "IP unchanged."
            return 0
        fi
    else
        echo "$(date +"%Y-%m-%d %T"): [LOCAL] New ip address detected. Old: $old_ip New: $current_local_ip. Updating ip for $hostname."
        true
    fi

    if [ "$DYNV6_USE_AUTO" = "true" ]; then
        $bin "https://ipv6.dynv6.com/api/update?hostname=$hostname&token=$DYNV6_TOKEN&ipv6=auto&ipv6prefix=auto"
    else
        # send addresses to dynv6
        echo "$(date +"%Y-%m-%d %T"): Calling: $bin https://dynv6.com/api/update?hostname=$hostname&token=$DYNV6_TOKEN&ipv6=$current_local_ip"
        $bin "https://dynv6.com/api/update?hostname=$hostname&token=$DYNV6_TOKEN&ipv6=$current_local_ip"
    fi

    # save current address
    echo "$current_local_ip" > "$current_ip_file"
)

# Start working

mapfile -t myarray < <(echo "$DYNV6_ZONES" | tr ',' '\n')

for current_host in "${myarray[@]}"; do
    #echo "$current_host"
    update_host "$current_host"
done
